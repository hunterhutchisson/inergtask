{"ast":null,"code":"var _jsxFileName = \"/Users/hunterhutchisson/digital-crafts/inergtask/src/components/SelectState.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Plot from 'react-plotly.js';\nimport Map from './Map';\nimport * as stateCoordList from '../assets/data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SelectState = () => {\n  _s();\n\n  const usData = useSelector(state => state.covidData.usData);\n  const stateData = useSelector(state => state.covidData.stateData);\n  const [selectedState, setSelectedState] = useState(null);\n  const [pieData, setPieData] = useState([]);\n  const [pieLayout, setPieLayout] = useState({});\n  const [barData, setBarData] = useState([]);\n  const [barLayout, setBarLayout] = useState({});\n  const [stateCoordinates, setStateCoordinates] = useState({});\n\n  const handleSelectState = e => {\n    let state = stateData.find(_ref => {\n      let {\n        state\n      } = _ref;\n      return state === e.target.value;\n    });\n    let stateCoord = stateCoordList.states.find(_ref2 => {\n      let {\n        name\n      } = _ref2;\n      return name === e.target.value;\n    });\n    let dataForPie = [{\n      values: [state.hospitalizedCurrently, state.death, state.positive - state.hospitalizedCurrently - state.death],\n      labels: ['Active Cases', 'Deaths', 'Recovered'],\n      domain: {\n        column: 0\n      },\n      name: `${state.state} Covid Cases`,\n      hoverinfo: 'label+value',\n      hole: .4,\n      type: 'pie'\n    }, {\n      values: [usData.positive - state.positive, state.positive],\n      labels: ['Rest of the US', state.state],\n      domain: {\n        column: 1\n      },\n      name: `${state.state} vs \nRest of the US`,\n      hoverinfo: 'label+value',\n      hole: .4,\n      type: 'pie'\n    }];\n    let layoutForPie = {\n      title: `${state.state} Covid Breakdown`,\n      annotations: [{\n        font: {\n          size: 8\n        },\n        showarrow: false,\n        text: `${state.state} Covid Cases`,\n        x: 0.17,\n        y: 0.5\n      }, {\n        font: {\n          size: 8\n        },\n        showarrow: false,\n        text: `vs Rest of the US`,\n        x: 0.85,\n        y: 0.5\n      }],\n      height: 400,\n      width: 600,\n      showlegend: false,\n      grid: {\n        rows: 1,\n        columns: 2\n      }\n    };\n    let dataForBar = [{\n      y: [state.positive, state.hospitalizedCurrently, state.positive - state.hospitalizedCurrently - state.death, state.death],\n      x: ['Total Cases', 'Active Cases', 'Recovered', 'Deaths'],\n      type: 'bar'\n    }];\n    let layoutForBar = {\n      width: 600,\n      height: 500,\n      title: `${state.state} covid cases`\n    };\n    console.log(dataForBar);\n    setPieData(dataForPie);\n    setPieLayout(layoutForPie);\n    setBarData(dataForBar);\n    setBarLayout(layoutForBar);\n    setStateCoordinates(stateCoord);\n    setSelectedState(state);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"height38\",\n      defaultValue: selectedState,\n      onChange: handleSelectState,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        hidden: true,\n        value: \"defaultValue\",\n        children: \"Pick a State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), stateData.map(state => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: state.state,\n          children: state.state\n        }, state.state, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 20\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), selectedState ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Plot, {\n        data: pieData,\n        layout: pieLayout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: barData,\n        layout: barLayout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Map, {\n        stateObj: stateCoordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setSelectedState(null),\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SelectState, \"WbATyZoE8ZNA2RXc5BjxfUAwUtA=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = SelectState;\nexport default SelectState;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectState\");","map":{"version":3,"sources":["/Users/hunterhutchisson/digital-crafts/inergtask/src/components/SelectState.jsx"],"names":["React","useState","useSelector","Plot","Map","stateCoordList","SelectState","usData","state","covidData","stateData","selectedState","setSelectedState","pieData","setPieData","pieLayout","setPieLayout","barData","setBarData","barLayout","setBarLayout","stateCoordinates","setStateCoordinates","handleSelectState","e","find","target","value","stateCoord","states","name","dataForPie","values","hospitalizedCurrently","death","positive","labels","domain","column","hoverinfo","hole","type","layoutForPie","title","annotations","font","size","showarrow","text","x","y","height","width","showlegend","grid","rows","columns","dataForBar","layoutForBar","console","log","map"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {useSelector} from 'react-redux';\nimport Plot from 'react-plotly.js';\nimport Map from './Map';\nimport * as  stateCoordList from '../assets/data.json';\n\n\nconst SelectState = () => {\n    const usData = useSelector(state => state.covidData.usData)\n    const stateData = useSelector(state => state.covidData.stateData)\n    const [selectedState, setSelectedState] = useState(null)\n    const [pieData, setPieData] = useState([])\n    const [pieLayout, setPieLayout] = useState({})\n    const [barData, setBarData] = useState([])\n    const [barLayout, setBarLayout] = useState({})\n    const [stateCoordinates, setStateCoordinates] = useState({})\n\n    const handleSelectState = (e) => {\n        let state = stateData.find(({state})=> state === e.target.value)\n        let stateCoord = stateCoordList.states.find(({name})=> name === e.target.value) \n        let dataForPie = [{\n            values: [state.hospitalizedCurrently, state.death, (state.positive - state.hospitalizedCurrently - state.death)],\n            labels: ['Active Cases', 'Deaths', 'Recovered'],\n            domain: {column: 0},\n            name: `${state.state} Covid Cases`,\n            hoverinfo: 'label+value',\n            hole: .4,\n            type: 'pie'\n        },\n        {\n            values: [(usData.positive-state.positive), state.positive],\n            labels: ['Rest of the US', state.state],\n            domain: {column: 1},\n            name: `${state.state} vs \nRest of the US`,\n            hoverinfo: 'label+value',\n            hole: .4,\n            type: 'pie'\n        }]\n        let layoutForPie = {\n            title: `${state.state} Covid Breakdown`,\n            annotations: [\n                {\n                    font: {\n                    size: 8\n                    },\n                    showarrow: false,\n                    text: `${state.state} Covid Cases`,\n                    x: 0.17,\n                    y: 0.5\n                },\n                {\n                    font: {\n                    size: 8\n                    },\n                    showarrow: false,\n                    text: `vs Rest of the US`,\n                    x: 0.85,\n                    y: 0.5\n                }\n            ],\n            height: 400,\n            width: 600,\n            showlegend: false,\n            grid: {rows: 1, columns: 2}\n        };\n        let dataForBar = [{\n            y: [state.positive, state.hospitalizedCurrently, (state.positive-state.hospitalizedCurrently-state.death),state.death],\n            x: ['Total Cases', 'Active Cases', 'Recovered','Deaths'],\n            type: 'bar'\n        }]\n        let layoutForBar = {\n            width: 600,\n            height: 500,\n            title: `${state.state} covid cases`\n        }\n        console.log(dataForBar);\n        setPieData(dataForPie)\n        setPieLayout(layoutForPie)\n        setBarData(dataForBar)\n        setBarLayout(layoutForBar)\n        setStateCoordinates(stateCoord)\n        setSelectedState(state)\n    }\n    return (\n        <>\n        <select className=\"height38\" defaultValue={selectedState} onChange={handleSelectState}>\n          <option hidden value=\"defaultValue\">Pick a State</option>\n          {stateData.map(state => {\n            return <option key={state.state} value={state.state}>{state.state}</option>\n          })}\n        </select>\n        {selectedState \n        ? \n        <>\n        <Plot data={pieData} layout={pieLayout} />\n        <Plot data={barData} layout={barLayout} />\n        <Map stateObj={stateCoordinates}/>\n        </>\n        : \n        null\n        }\n\n\n\n          <button onClick={()=>setSelectedState(null)}>Reset</button>\n        \n        </>\n    )\n}\n\nexport default SelectState\n"]},"metadata":{},"sourceType":"module"}